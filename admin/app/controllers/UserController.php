<?php/** * Description of UserController * * @author abrah */require_once APP . '/models/User.php';require_once APP . '/models/Mailer.php';class UserController {    public function actionIndex($alias) {        $users = [];        $users = User::getUsers();        require_once APP . '/views/user/grid.php';        return true;    }    /**     * This method does something     * @param Something     * @author abrah     */    public function actionLogin() {        $email = "";        $password = "";        if (isset($_POST['submit'])) {            $email = $_POST['login'];            $password = $_POST['password'];            $errors = false;            if (empty($email) || empty($password)) {                $errors[] = "Enter username and password.";            } elseif (!User::checkEmailExists($email, "0,2")) {                $errors[] = "Invalid username or password.";            } elseif (!User::checkUserData($email, $password)) {                $errors[] = "Invalid username or password.";            } else {                $userId = User::checkUserData($email, $password);                User::auth($userId);                header("Location: /admin");            }        }        require_once APP . '/views/user/login.php';        return true;    }    /**     * This method does something     * @param Something     * @author abrah     */    public function actionLogout() {        unset($_SESSION['user']);        session_destroy();        header("Location: login");    }    /**     * This method does something     * @param Something     * @author abrah     */    public function actionSubscribers($alias) {        $subscribers = User::getSubscribers(1);        require_once APP . '/views/user/gridSubscribers.php';        return true;    }    /**     * This method does something     * @param Something     * @author abrah     */    public function actionUnsubscribed($alias) {        $subscribers = User::getSubscribers(0);        require_once APP . '/views/user/gridSubscribers.php';        return true;    }    /**     * This method does something     * @param Something     * @author abrah     */    public function actionSettings() {        if (isset($_POST['update'])) {            $error = false;            $success = false;            $name = ($_POST['name']);            $email = $_POST['email'];            $phone = $_POST['phone'];            $password = $_POST['password'];            if (!User::checkPasswordExists($_SESSION['user']['id'], $password)) {                $error = error("Invalid password");            } else            if (!User::checkUserName($name)) {                $error = error("Invalid name");            } else            if (!User::checkEmail($email)) {                $error = error("Invalid E-mail format");            } else            if ($error == false) {                User::setUserData($name, $email, $phone, $password);                $success = success("Action complete successfull.");            }        }        $userData = User::getUserData();        if (isset($_POST['updatePassword'])) {            $error1 = false;            $success1 = false;            $password = ($_POST['oldPassword']);            $newPassword = $_POST['newPassword'];            $rePassword = $_POST['reNewPassword'];            if (empty($password) || empty($newPassword) || empty($rePassword)) {                $error1 = error("All fields are required.");            } elseif (!User::checkPasswordExists($_SESSION['user']['id'], $password)) {                $error1 = error("Old password is Invalid.");            } elseif (!User::checkPassword($newPassword)) {                $error1 = error("Password must be at least 6 characters.");            } elseif ($newPassword != $rePassword) {                $error1 = error("Passwords does not match.");            } elseif ($error1 == false) {                User::setPassword($password, $newPassword);                $success1 = success("Action complete successfull.");            }        }        require_once APP . '/views/user/index.php';        return true;    }    public function actionUserPermissions($alias, $action, $userId) {        $permissions = Options::getPermissionByUser($userId);        $menu = Options::getPermissionByUserModul($userId);        require_once APP . '/views/user/userData.php';        return true;    }    public function actionCheckPermission() {        if (isset($_POST['checkPermission'])) {            $pageId = $_POST['pageId'];            $userId = $_POST['userId'];            $check = Options::checkPermission($userId, $pageId);            if ($check) {                Options::unsetPermission($userId, $pageId);            } else {                Options::setPermission($userId, $pageId);            }        }    }    public function actionCreate() {        if (isset($_POST['submit'])) {            $name = $_POST['name'];            $email = $_POST['email'];            $phone = $_POST['phone'];            $error = false;            $success = false;            if (empty($name) || empty($email)) {                $error = error("Name and E-mail are required.");            } elseif (!User::checkEmail($email)) {                $error = error("Wrong E-mail.");            } elseif (User::checkEmailExists1($email)) {                $error = error("User with this E-mail already exists.");            }            if ($error == false) {                $type = 2;                $array = ['name' => $name, 'email' => $email, 'phone' => $phone, 'subscribe' => 0];                $userId = User::userSubscribe($array, $type);                $session = ['userId' => $userId, 'session' => sha1(microtime()), 'date' => date('Y-m-d H:i:s'), 'status' => 0];                User::setSession($session);                Mailer::sendMail($email, "Complete registration", "Open link to complete registration.<br> http://www.ashamayan.com/admin/user/confirm/" . $session['session']);                $success = success("Action complete successful.");            }        }        require_once APP . '/views/user/new.php';        return true;    }    public function actionConfirm($alias, $action, $session) {        if (isset($_POST['submit']) == 'Submit') {            $error = false;            $password = $_POST['password'];            $rePassword = $_POST['rePassword'];            if (empty($password) || empty($rePassword)) {                $error = error("All fields are required.");            } elseif ($password != $rePassword) {                $error = error("Passwords does not match.");            } elseif (!User::checkPassword($password)) {                $error = error("Password must be a minimum of 6 characters, contains at least one number, one uppercase and one lowercase character.");            } elseif (User::checkConfirmed($session) == 1) {                $error = error("Account already confirmed.");            } elseif ($error === false) {                User::confirmUser($session, $password);                $success = success('Action complete successfull. <br> Go to <a href="http://ashamayan.com/admin/user/login">Login page</a> to login.');            }        }        require_once APP . '/views/user/confirm.php';        return true;    }}